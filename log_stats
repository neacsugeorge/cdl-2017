#!/usr/local/bin/node

var fs = require('fs');
var readline = require('readline');

var params = {
    file: '',
    start: false,
    end: false,
    success: '2xx',
    interval: 1
};

function parseArgs() {
    var {argv} = process;
    if (argv.length < 3) {
        console.log('400 - have a nice day');
        return process.exit();
    }
    
    var need = ['start', 'end', 'interval', 'success'];

    argv.shift();
    argv.shift();

    for (var i = 0; i < need.length; i++) {
        var pos = argv.indexOf('--' + need[i]);
        if (pos == -1) continue;

        params[need[i]] = argv[pos +1];
        argv.splice(pos, 2);
    }

    if (argv.length < 1) {
        console.log('400 - have a nice day');
        return process.exit();
    }

    params.file = argv[0];
}

parseArgs();

//Prepare params
if (params.start) params.start = new Date(params.start + ':00').getTime();
if (params.end) params.end = new Date(params.end + ':00').getTime();
params.interval = parseInt(params.interval);
if (typeof params.success == 'string') {
    var split = params.success.split(',');
    var pattern = '';

    for (var i = 0; i < split.length; i++) {
        pattern += '(' + split[i].replace(/x/g, '[0-9]') + ')|';
    }

    pattern = pattern.substr(0, pattern.length -1);
    params.success = new RegExp(pattern);
}

//First group - timestamp
//Second group - request
//Third group - status code
var theMightyPattern = /(([0-9]{2}\/[a-zA-Z]{3,4}\/[0-9]{4}\:([0-9\:]{2,3}){2}[0-9]{2}))|(?:GET\s)(\/[a-zA-Z0-9\-\_\/]+\.[a-z]{2,})|(?:\"\s)([0-9]{3})(?:\s)/g;
var timePattern = /([0-9]{2})\/([a-zA-Z]{3})\/([0-9]{4})(:)([0-9]{2}\:[0-9]{2})/;

var months = ['#nope', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
var mindfuck = ['#nope', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];
String.prototype.toDate = function() {
    var explode = timePattern.exec(this);
    return new Date(explode[3] + '-' + mindfuck[months.indexOf(explode[2])] + '-' + explode[1] + 'T' + explode[5] + ':00');
};

function parseLine(line) {
    var matches = line.match(theMightyPattern);

    line = {
        path: matches[1].substr(4),
        time: matches[0].toDate().getTime(),
        status: parseInt(matches[2].substr(2))
    };

    return line;
}

var statsByPath = {};
var statsByStart = {};
var lastReadTime = false;
/**
 * total - int - number of requests
 * valid - bool - valid statuses
 * start - date - beginning of interval
 * [start, total, valid]
 */
var START = 0, TOTAL = 1, VALID = 2;


function sameTime(a, b) {
    return parseInt(a) == parseInt(b);
}

function isInInterval(start, now) {
    start = parseInt(start);
    now = parseInt(now);

    if (isNaN(start) || isNaN(now)) return true;

    return (now - start) / 1000 / 60 < params.interval;
}

function isValidStatus(status) {
    return params.success.test(status);
}

Number.prototype.toTimestamp = function() {
    return new Date(this).toISOString().substr(0, 16);
};
String.prototype.toTimestamp = function() {
    return parseInt(this).toTimestamp();
};

function printStats(last) {
    var output = [];
    for (var time in statsByStart) {
        if (isInInterval(time, lastReadTime) && !last) return;
        output = [];

        for (var path in statsByStart[time]) {
            var valid = statsByPath[path][VALID];
            var total = statsByPath[path][TOTAL];

            var stat = Math.round(valid / total * 100 * 100) / 100;
            stat = stat.toFixed(2);

            output.push([path, stat]);
            delete statsByPath[path];
        }

        if (!output.length) return;

        output.sort((a, b) => a[0] < b[0] ? -1 : a[0] > b[0] ? 1 : 0);
        for(var one of output)
            console.log(time.toTimestamp(), params.interval, one[0], one[1]);

        delete statsByStart[time];
    }

}

function updateStat(path, time, status) {
    printStats();

    var valid = isValidStatus(status) ? 1 : 0;
    
    var found = true;
    var current = false;
    current = statsByPath[path];
    if (!current) {
        current = [time, 0, 0];
        found = false;
    }

    current[TOTAL]++;
    current[VALID]+= valid;

    statsByPath[path] = current;
    if (!found) {
        if (!statsByStart[time]) statsByStart[time] = {};

        statsByStart[time][path] = current;
    }

}


//var's have fun
var reader = readline.createInterface({
    input: fs.createReadStream(params.file)
});

reader.on('line', (line) => {
    line = parseLine(line);

    var current = line.time;
    var commited = false;
    lastReadTime = current;

    if (params.start) {
        var start = params.start;
        
        if(start > current) return;

        updateStat(line.path, current, line.status);
        commited = true;
    }

    if (params.end && params.end <= current)
        return reader.close();

    if (!commited) updateStat(line.path, current, line.status);
});

reader.on('close', () => {
    printStats(true);
});